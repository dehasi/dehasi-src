---
layout: post
title:  "Test with Spring Cloud Contract"
---

Spring cloud contract is a powerful tool for testing and mocking. 
In this post, I try to use Spring cloud contract to build a simple web application and show how Spring cloud contract can be helpful.

Fist. I went to http://start.spring.io/ and generated a skeleton of my project. I added only JAX-RS and Spring cloud contract dependencies. 

Now I'm able to add a first controller. My app will say "hello"
I.e. If I request `/greet/john` 
I want to get a  
{% highlight json %}
{"greet":"Good afternoon John"} 
{% endhighlight %}
as a response.

First I should create a Controller which will process my requests. And create a base class for my auto-generated tests.
Then. I'll be able to create my first contract. 
So at the beginning my controller, will look like:
{% highlight java %}
@RestController
public class GreetController  {}
{% endhighlight %}
an empty class. I'm not going to write code. Let's create an environment first. 

Then I should create my base test class and add controller. I use http://rest-assured.io/ for testing.
{% highlight java %}
public class MvcTest {
   @Before
   public void setup() {
       RestAssuredMockMvc.standaloneSetup(new GreetController());
   }
}
{% endhighlight %}

Also, I should add a contract plugin to `pom.xml`. And put my `MvcTest` class to 
`baseClassForTests` property.

{% highlight xml %}
<plugin>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-contract-maven-plugin</artifactId>
  <version>1.2.1.RELEASE</version>
  <extensions>true</extensions>
  <configuration>
     <!-- Provide the base class for your auto-generated tests -->
     <baseClassForTests>me.greet.greet.MvcTest</baseClassForTests>
  </configuration>
</plugin>
{% endhighlight %}

And now I can create my first contract. It should be a groovy file in 
`\src\test\resources\contracts` folder. I put mine in `\src\test\resources\contracts\greet\afternoon_greet.groovy`

{% highlight groovy %}
org.springframework.cloud.contract.spec.Contract.make {
   request {
       method 'GET'
       urlPath('/greet/john')
   }
   response {
       status 200
       body(
               '''
               {
                 "greet": "Good afternoon John"
               }
               '''
       )
       headers {
           header('Content-Type', 'application/json;charset=UTF-8')
       }
   }
}
{% endhighlight %}

Now, if I `run mvn clean verify`, I'll get
```
Failed tests:
  GreetTest.validate_afternoon_greet:26 expected:<[200]> but was:<[404]>
```
Which is quite obvious. 
Before fixing the test. Let’s look at other options, which SCC gives to us.

### spring-cloud-contract:generateTests
Generates unit-tests from contracts, and put them into `\target\generated-test-sources\contracts`
The test, which was generated by my contact locates in `\target\generated-test-sources\contracts\me\greet\greet\GreetTest.java`
Let’s look at it 
{% highlight java %}
public class GreetTest extends MvcTest {

  @Test
  public void validate_afternoon_greet() throws Exception {
     // given:
        MockMvcRequestSpecification request = given();

     // when:
        ResponseOptions response = given().spec(request)
              .get("/greet/john");

     // then:
        assertThat(response.statusCode()).isEqualTo(200);
        assertThat(response.header("Content-Type")).isEqualTo("application/json;charset=UTF-8");
     // and:
        DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());
        assertThatJson(parsedJson).field("['greet']").isEqualTo("Good afternoon John");
  }

}
{% endhighlight %}

### mvn spring-cloud-contract:convert
Converts contracts  into WireMock stub mappings.http://wiremock.org  The mappings are json files and they stay in 
`target\stubs\META-INF\me.greet\greet\0.0.1-SNAPSHOT\mappings`
`target\stubs\META-INF\me.greet\greet\0.0.1-SNAPSHOT\mappings/greet/greet_afternoon.json` looks like

{% highlight json %}
{
 "id" : "1ed076d5-513f-417f-9c34-f6be58c72bbb",
 "request" : {
   "urlPath" : "/greet/john",
   "method" : "GET"
 },
 "response" : {
   "status" : 200,
   "body" : "{\"greet\":\"Good afternoon John\"}",
   "headers" : {
     "Content-Type" : "application/json;charset=UTF-8"
   },
   "transformers" : [ "response-template" ]
 },
 "uuid" : "1ed076d5-513f-417f-9c34-f6be58c72bbb"
}

{% endhighlight %}

### mvn spring-cloud-contract:generateStubs
Generate stubs from wiremock mappings. and out then to jar file
`\target\greet-0.0.1-SNAPSHOT-stubs.jar`

### mvn spring-cloud-contract:run
Runs wiremock.  You something like below in logs
```
[INFO] All stubs are now running RunningStubs [namesAndPorts={\target\stubs:+:stubs=8080}]
[INFO] Press ENTER to continue...
```
if we go to `http://localhost:8080/greet/john` we get our expected result. But i.e. if we request
`http://localhost:8080/greet/sam`

A useful error response 

![My helpful screenshot]({{ "/assets/2017-12-23-tdd-with-scc.png" | absolute_url }})

At the end, let’s write the simplest version of controller and check that tests work.
{% highlight java %}
@RestController
public class GreetController {

   @GetMapping("greet/john")
   Afternoon greet() {
       return new Afternoon("Good afternoon John");
   }
}

class Afternoon {
   private final String greet;

   Afternoon(String greet) {
       this.greet = greet;
   }

   public String getGreet() {
       return greet;
   }
}
{% endhighlight %}

Now, if I `run mvn clean verify`, I’ll get
```
[INFO] BUILD SUCCESS
```

[spring-init]: https://start.spring.io
